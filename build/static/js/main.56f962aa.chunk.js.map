{"version":3,"sources":["assets/splashcube.gif","SplashScreen.js","Context.js","Modal.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","SplashScreen","React","createElement","id","className","src","splashGif","alt","style","color","display","justifyContent","width","height","border","background","title","textAlign","role","aria-label","ModalContext","createContext","useModal","useContext","ModalProvider","_ref","children","isModalOpen","setIsModalOpen","useState","currentVideoID","setCurrentVideoID","openModal","useCallback","videoID","console","log","concat","closeModal","providerValue","useMemo","Provider","value","Modal","location","useLocation","videoInfo","setVideoInfo","modalRef","useRef","handleCloseModal","window","history","pushState","useEffect","isMounted","axios","get","then","response","data","catch","error","handleOuterClick","event","current","contains","target","document","addEventListener","body","classList","add","removeEventListener","remove","pathname","embeddedVideoUrl","url","vimeoId","split","getEmbeddedVideoUrl","URL","ref","onClick","e","stopPropagation","videoName","allow","allowFullScreen","dangerouslySetInnerHTML","__html","Description","BASE_URL","Video","memo","onVideoClick","videoRef","inView","useInView","triggerOnce","rootMargin","handleMouseEnter","isMobile","play","handleMouseLeave","pause","loop","muted","playsInline","onMouseEnter","onMouseLeave","prevProps","nextProps","MemoizedMainContent","_ref2","scenes","uniqueVideoIDs","useParams","shuffledScenes","setShuffledScenes","array","i","length","j","Math","floor","random","shuffleArray","some","scene","handleVideoNameClick","modalOpen","map","video","index","key","sceneURL","Home","_ref3","navigate","useNavigate","showSplash","setShowSplash","handleScroll","_","debounce","scrollY","innerHeight","Fragment","AppWrapper","setScenes","setUniqueVideoIDs","async","scenesResponse","videosResponse","uniqBy","fetchContent","memoizedScenes","memoizedUniqueVideoIDs","Router","Suspense","fallback","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","App"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,wC,mMCyC5BC,MAtCf,WACE,OACEC,IAAAC,cAAA,OAAKC,GAAG,iBAAiBC,UAAU,iBACjCH,IAAAC,cAAA,OAAKE,UAAU,iBACbH,IAAAC,cAAA,OAAKE,UAAU,kBACbH,IAAAC,cAAA,OAAKG,IAAKC,IAAWC,IAAI,aAAaH,UAAU,iBAChDH,IAAAC,cAAA,OAAKE,UAAU,eACbH,IAAAC,cAAA,SAAG,qFAC4ED,IAAAC,cAAA,SAAG,OAAO,cAEzFD,IAAAC,cAAA,SAAG,uHACmHD,IAAAC,cAAA,SAAG,WAAW,iDAEpID,IAAAC,cAAA,SACED,IAAAC,cAAA,SAAG,YAAY,qGAAwFD,IAAAC,cAAA,KAAGM,MAAO,CAAEC,MAAO,SAAU,WAAW,OAAIR,IAAAC,cAAA,KAAGM,MAAO,CAAEC,MAAO,SAAU,YAAY,SAAMR,IAAAC,cAAA,KAAGM,MAAO,CAAEC,MAAO,SAAU,yBAAyB,OAAIR,IAAAC,cAAA,KAAGM,MAAO,CAAEC,MAAO,SAAU,gCAAgC,SAAMR,IAAAC,cAAA,KAAGM,MAAO,CAAEC,MAAO,SAAU,iBAAW,OAAIR,IAAAC,cAAA,KAAGM,MAAO,CAAEC,MAAO,SAAU,gBAE1YR,IAAAC,cAAA,SAAG,6TAGHD,IAAAC,cAAA,OAAKE,UAAU,eAAeI,MAAO,CAAEE,QAAS,OAAQC,eAAgB,WACxEV,IAAAC,cAAA,UACEG,IAAI,yCACJO,MAAM,MACNC,OAAO,MACPL,MAAO,CAAEM,OAAQ,iBAAkBC,WAAY,SAC/CC,MAAM,qBAGRf,IAAAC,cAAA,KAAGM,MAAO,CAAES,UAAW,WACvBhB,IAAAC,cAAA,QAAMgB,KAAK,MAAMC,aAAW,sBAAqB,gBAASlB,IAAAC,cAAA,SAAG,6BAA6BD,IAAAC,cAAA,QAAMgB,KAAK,MAAMC,aAAW,uBAAsB,sB,eC9BxJ,MAAMC,EAAeC,0BAERC,EAAWA,IAAMC,qBAAWH,GAE5BI,EAAgBC,IAAmB,IAAlB,SAAEC,GAAUD,EACxC,MAAOE,EAAaC,GAAkBC,oBAAS,IACxCC,EAAgBC,GAAqBF,mBAAS,MAG/CG,EAAYC,sBAAaC,IAC7BC,QAAQC,IAAI,8BAADC,OAA+BH,IAC1CN,GAAe,GACfG,EAAkBG,IACjB,IAGGI,EAAaL,sBAAY,KAC7BE,QAAQC,IAAI,iBACZR,GAAe,GACfG,EAAkB,OACjB,IAGGQ,EAAgBC,kBAAQ,MAC5Bb,cAAaG,iBAAgBE,YAAWM,eACtC,CAACX,EAAaG,EAAgBE,EAAWM,IAE7C,OACErC,IAAAC,cAACkB,EAAaqB,SAAQ,CAACC,MAAOH,GAC3Bb,IC2EQiB,MAjGf,WACE,MAAMC,EAAWC,eACX,YAAElB,EAAW,eAAEG,EAAc,WAAEQ,GAAehB,KAC7CwB,EAAWC,GAAgBlB,mBAAS,MACrCmB,EAAWC,iBAAO,MAExBd,QAAQC,IAAI,4BAA6B,CAAET,cAAaG,mBAExD,MAAMoB,EAAmBjB,sBAAY,KACnCK,IAEAa,OAAOC,QAAQC,UAAU,GAAI,GAAI,MAChC,CAACf,IAEJgB,oBAAU,KACR,IAAIC,GAAY,EAgBhB,OAdIzB,IAAkBH,GAAiBmB,GAAaA,EAAUZ,UAAYJ,EAU9DH,GACVoB,EAAa,MAVbS,IAAMC,IAAI,GAADpB,OArBX,iDAqBuB,oBAAAA,OAAmBP,IACrC4B,KAAKC,IACAJ,GACFR,EAAaY,EAASC,QAGzBC,MAAMC,IACL3B,QAAQ2B,MAAM,8BAA+BA,KAM5C,KACLP,GAAY,IAEf,CAACzB,EAAgBH,EAAamB,IAE/BQ,oBAAU,KAER,MAAMS,EAAoBC,IACpBhB,EAASiB,UAAYjB,EAASiB,QAAQC,SAASF,EAAMG,SACvDjB,KAYJ,OARIvB,GACFyC,SAASC,iBAAiB,YAAaN,GACvCK,SAASE,KAAKC,UAAUC,IAAI,eAE5BJ,SAASK,oBAAoB,YAAaV,GAC1CK,SAASE,KAAKC,UAAUG,OAAO,cAG1B,KACLN,SAASK,oBAAoB,YAAaV,GAC1CK,SAASE,KAAKC,UAAUG,OAAO,eAEhC,CAAC/C,EAAauB,IAEjBI,oBAAU,KAEkB,MAAtBV,EAAS+B,UAAoBhD,GAC/BW,KAED,CAACM,EAAUjB,EAAaW,IAG3B,MAOMsC,EAAmBpC,kBAAQ,IAAMM,EAPV+B,KAC3B,MACMC,EADQD,EAAIE,MAAM,cAAc,GAChBA,MAAM,KAAK,GACjC,MAAM,kCAAN1C,OAAyCyC,IAIQE,CAAoBlC,EAAUmC,KAAO,KAAM,CAACnC,IAG/F,OAAKnB,GAAgBmB,EAGnB7C,IAAAC,cAAA,OAAKE,UAAS,SAAAiC,OAAWV,EAAc,OAAS,IAAMuD,IAAKlC,GACzD/C,IAAAC,cAAA,OAAKE,UAAU,gBAAgB+E,QAAUC,GAAMA,EAAEC,mBAC/CpF,IAAAC,cAAA,QAAME,UAAU,QAAQ+E,QAASjC,GAAkB,QACnDjD,IAAAC,cAAA,UAAK4C,EAAUwC,WACfrF,IAAAC,cAAA,OAAKE,UAAU,mBACbH,IAAAC,cAAA,UACEG,IAAKuE,EACLW,MAAM,uBACNC,iBAAe,EACfxE,MAAO8B,EAAUwC,aAGrBrF,IAAAC,cAAA,OAAKuF,wBAAyB,CAAEC,OAAQ5C,EAAU6C,iBAfjB,M,gCCzEzC,MAAMC,EACF,iDAIEC,EAAQ5F,IAAM6F,KAAKrE,IAAqC,IAApC,IAAEpB,EAAG,QAAE6B,EAAO,aAAE6D,GAActE,EACtD,MAAMuE,EAAW/C,iBAAO,OAClB,IAAEiC,EAAG,OAAEe,GAAWC,YAAU,CAChCC,aAAa,EACbC,WAAY,aAIRC,EAAmBpE,sBAAY,MAC9BqE,YAAYN,EAAS/B,SACxB+B,EAAS/B,QAAQsC,OAAO1C,MAAMC,GAAS3B,QAAQ2B,MAAM,wBAAyBA,KAE/E,IAGG0C,EAAmBvE,sBAAY,MAC9BqE,YAAYN,EAAS/B,SACxB+B,EAAS/B,QAAQwC,SAElB,IASH,OANAnD,oBAAU,KACJgD,YAAYL,GAAUD,EAAS/B,SACjC+B,EAAS/B,QAAQsC,OAAO1C,MAAMC,GAAS3B,QAAQC,IAAI,0BAA2B0B,KAE/E,CAACmC,IAGFhG,IAAAC,cAAA,OAAKgF,IAAKA,EAAK1E,MAAO,CAAEI,MAAO,OAAQC,OAAQ,SAC5CoF,GACChG,IAAAC,cAAA,SACEgF,IAAKc,EACL3F,IAAKA,EACLqG,MAAI,EACJC,OAAK,EACLC,aAAW,EACXzB,QAASA,IAAMY,EAAa7D,GAC5B2E,aAAcR,EACdS,aAAcN,EACdhG,MAAO,CAAEI,MAAO,OAAQC,OAAQ,YAKvC,CAACkG,EAAWC,IAAcD,EAAU7E,UAAY8E,EAAU9E,SAAW6E,EAAU1G,MAAQ2G,EAAU3G,KAwDpG,MAAM4G,EAAsBhH,IAAM6F,MA5ClC,SAAoBoB,GAA8B,IAA7B,OAAEC,EAAM,eAAEC,GAAgBF,EAC7C,MAAM,QAAEhF,GAAYmF,eACd,UAAErF,EAAS,eAAEF,GAAmBR,KAC/BgG,EAAgBC,GAAqB1F,mBAAS,IAErDyB,oBAAU,KACRiE,EAfJ,SAAsBC,GACpB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,MAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,KACzCD,EAAMC,GAAID,EAAMG,IAAM,CAACH,EAAMG,GAAIH,EAAMC,IAE1C,OAAOD,EAUaO,CAAa,IAAIZ,MAClC,CAACA,IAEJ7D,oBAAU,KACJpB,GAAWiF,EAAOa,KAAKC,GAASA,EAAM/F,UAAYA,IAAYJ,IAAmBI,GACnFF,EAAUE,IAEX,CAACA,EAASiF,EAAQnF,EAAWF,IAEhC,MAAMoG,EAAuBjG,sBAAa9B,IACxCgD,OAAOC,QAAQC,UAAU,CAAE8E,WAAW,GAAQ,GAAG,IAAD9F,OAAMlC,IACtD6B,EAAU7B,IACT,CAAC6B,IAEJ,OACE/B,IAAAC,cAAA,OAAKC,GAAG,iBAAiBC,UAAU,OACjCH,IAAAC,cAAA,OAAKE,UAAU,cACZgH,EAAegB,IAAI,CAACC,EAAOC,IAC1BrI,IAAAC,cAAA,OAAKqI,IAAG,GAAAlG,OAAKgG,EAAMnG,QAAO,KAAAG,OAAIiG,GAASnD,QAASA,IAAM+C,EAAqBG,EAAMnG,SAAU9B,UAAU,mBAClGiI,EAAM/C,aAIbrF,IAAAC,cAAA,OAAKE,UAAU,cACZkH,EAAec,IAAIH,GAClBhI,IAAAC,cAAC2F,EAAK,CACJ0C,IAAKN,EAAMO,SACXnI,IAAK4H,EAAMO,SACXtG,QAAS+F,EAAM/F,QACf6D,aAAcmC,UAW1B,SAASO,EAAIC,GAA8B,IAA7B,OAAEvB,EAAM,eAAEC,GAAgBsB,EACtC,MAAMC,EAAWC,cACXhG,EAAWC,eACVgG,EAAYC,GAAiBjH,mBAA+B,aAAtBe,EAAS+B,UAoBtD,OAlBArB,oBAAU,KAER,MAAMyF,EAAeC,IAAEC,SAAS,KAE1B9F,OAAO+F,QAA+B,EAArB/F,OAAOgG,aAA2C,MAAtBvG,EAAS+B,UACxDgE,EAAS,MAEV,KAGH,OADAxF,OAAOkB,iBAAiB,SAAU0E,GAC3B,IAAM5F,OAAOsB,oBAAoB,SAAUsE,IACjD,CAACJ,EAAU/F,EAAS+B,WAEvBrB,oBAAU,KAERwF,EAAoC,aAAtBlG,EAAS+B,WACtB,CAAC/B,EAAS+B,WAGX1E,IAAAC,cAAAD,IAAAmJ,SAAA,KACGP,EAAa5I,IAAAC,cAACF,EAAY,MAAM,KACjCC,IAAAC,cAAC+G,EAAmB,CAACE,OAAQA,EAAQC,eAAgBA,KA8C5CiC,MAzCf,WAEE,MAAOlC,EAAQmC,GAAazH,mBAAS,KAC9BuF,EAAgBmC,GAAqB1H,mBAAS,IAErDyB,oBAAU,KAEakG,WACnB,IACE,MAAMC,QAAuBjG,IAAMC,IAAI,GAADpB,OAAIuD,EAAQ,gBAClD0D,EAAUG,EAAe7F,MACzB,MAAM8F,QAAuBlG,IAAMC,IAAI,GAADpB,OAAIuD,EAAQ,gBAClD2D,EAAkBP,IAAEW,OAAOD,EAAe9F,KAAM,YAChDzB,QAAQC,IAAI,kBAAmBqH,EAAe7F,MAC9CzB,QAAQC,IAAI,kBAAmBsH,EAAe9F,MAC9C,MAAOE,GACP3B,QAAQ2B,MAAM,2BAA4BA,KAG9C8F,IACC,IAGH,MAAMC,EAAiBrH,kBAAQ,IAAM2E,EAAQ,CAACA,IACxC2C,EAAyBtH,kBAAQ,IAAM4E,EAAgB,CAACA,IAE9D,OACEnH,IAAAC,cAAC6J,IAAM,KACL9J,IAAAC,cAAC8J,WAAQ,CAACC,SAAUhK,IAAAC,cAAA,WAAK,eACvBD,IAAAC,cAACsB,EAAa,KACZvB,IAAAC,cAACgK,IAAM,KACLjK,IAAAC,cAACiK,IAAK,CAACC,KAAK,WAAWC,QAASpK,IAAAC,cAACuI,EAAI,CAACtB,OAAQ0C,EAAgBzC,eAAgB0C,MAC9E7J,IAAAC,cAACiK,IAAK,CAACC,KAAK,IAAIC,QAASpK,IAAAC,cAACuI,EAAI,CAACtB,OAAQ0C,EAAgBzC,eAAgB0C,MACvE7J,IAAAC,cAACiK,IAAK,CAACC,KAAK,YAAYC,QAASpK,IAAAC,cAACyC,EAAK,aC5KpC2H,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9G,KAAKjC,IAAkD,IAAjD,OAAEgJ,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASpJ,EACpEgJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,MCCdO,IAASC,WAAW3G,SAAS4G,eAAe,SAASC,OACnDhL,IAAAC,cAACD,IAAMiL,WAAU,KACfjL,IAAAC,cAACsB,EAAa,KACZvB,IAAAC,cAACiL,EAAG,SAQVb,M","file":"static/js/main.56f962aa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/splashcube.9243f971.gif\";","import React from 'react';\nimport splashGif from './assets/splashcube.gif';\n\nfunction SplashScreen() {\n  return (\n    <div id=\"splash-section\" className=\"splash-screen\">\n      <div className=\"splash-screen\">\n        <div className=\"splash-content\">\n          <img src={splashGif} alt=\"Splash GIF\" className=\"splash-image\" />\n          <div className=\"splash-text\">\n            <p>\n              The Rubik’s Cube has 43,000,000,000,000,000,000 possible combinations... and <i>one</i> solution.\n            </p>\n            <p>\n              It's easy to appreciate the puzzle in its solved form: a universe of possibility reduced to six harmonic faces. But <i>leaving</i> it solved would squander all that potential.\n            </p>\n            <p>\n              <b>VU JA DE</b> exists to scramble “solved” arrangements of cultural ephemera. To flip the switch from <i style={{ color: 'blue' }}>solving</i> to <i style={{ color: 'blue' }}>playing.</i> From <i style={{ color: 'blue' }}>I've been here before</i> to <i style={{ color: 'blue' }}>I've never seen this before.</i> From <i style={{ color: 'blue' }}>déjà vu</i> to <i style={{ color: 'blue' }}>vujà de.</i>\n            </p>\n            <p>\n              Like the 43 quintillion permutations of the Rubik's Cube, these stories are starting points, not resolutions. They're not made for an algorithmic feed or a distracted scroll, which is why they come to your email. Explore on your own time, at your own pace, with nobody trying to sell you something in the process.\n            </p>\n            <div className=\"splash-embed\" style={{ display: 'flex', justifyContent: 'center' }}>\n            <iframe\n              src=\"https://vujadeworld.substack.com/embed\"\n              width=\"480\"\n              height=\"150\"\n              style={{ border: '0px solid #EEE', background: 'white' }}\n              title=\"VUJADE Substack\"\n            ></iframe>\n          </div>\n            <p style={{ textAlign: 'center' }}>\n            <span role=\"img\" aria-label=\"Rolling Eyes Emoji\">🙄</span><b> Keep scrolling to enter </b><span role=\"img\" aria-label=\"Pointing Down Emoji\">👇</span>\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SplashScreen;\n","import React, { createContext, useContext, useState, useMemo, useCallback } from 'react';\n\nconst ModalContext = createContext();\n\nexport const useModal = () => useContext(ModalContext);\n\nexport const ModalProvider = ({ children }) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [currentVideoID, setCurrentVideoID] = useState(null);\n\n  // Memoize the openModal function\n  const openModal = useCallback((videoID) => {\n    console.log(`Opening modal for videoID: ${videoID}`);\n    setIsModalOpen(true);\n    setCurrentVideoID(videoID);\n  }, []); // No dependencies, this function does not need to be recreated\n\n  // Memoize the closeModal function\n  const closeModal = useCallback(() => {\n    console.log('Closing modal');\n    setIsModalOpen(false);\n    setCurrentVideoID(null);\n  }, []); // No dependencies, this function does not need to be recreated\n\n  // Memoize the context value to ensure that it doesn't trigger unnecessary re-renders\n  const providerValue = useMemo(() => ({\n    isModalOpen, currentVideoID, openModal, closeModal\n  }), [isModalOpen, currentVideoID, openModal, closeModal]);\n\n  return (\n    <ModalContext.Provider value={providerValue}>\n      {children}\n    </ModalContext.Provider>\n  );\n};","import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport axios from 'axios';\nimport { useLocation } from 'react-router-dom';\nimport { useModal } from './Context';\n\nconst BASE_URL = process.env.NODE_ENV === 'production'\n  ? 'https://vujade-site-bd6c94750c62.herokuapp.com'\n  : 'http://127.0.0.1:5000';\n\nfunction Modal() {\n  const location = useLocation();\n  const { isModalOpen, currentVideoID, closeModal } = useModal();\n  const [videoInfo, setVideoInfo] = useState(null);\n  const modalRef = useRef(null);\n\n  console.log('Rendering Modal component', { isModalOpen, currentVideoID });\n\n  const handleCloseModal = useCallback(() => {\n    closeModal();\n    // Manipulate URL to go back to the root without causing a re-render\n    window.history.pushState({}, '', '/');\n  }, [closeModal]);  \n\n  useEffect(() => {\n    let isMounted = true;\n    // Check if videoInfo is already set for the currentVideoID to prevent unnecessary fetching\n    if (currentVideoID && isModalOpen && (!videoInfo || videoInfo.videoID !== currentVideoID)) {\n      axios.get(`${BASE_URL}/api/video_info/${currentVideoID}`)\n        .then(response => {\n          if (isMounted) {\n            setVideoInfo(response.data);\n          }\n        })\n        .catch(error => {\n          console.error('Error fetching video info: ', error);\n        });\n    } else if (!isModalOpen) {\n      setVideoInfo(null); // Reset videoInfo when modal is closed\n    }\n\n    return () => {\n      isMounted = false;\n    };\n}, [currentVideoID, isModalOpen, videoInfo]);\n\n  useEffect(() => {\n    // Setup to close the modal by clicking outside\n    const handleOuterClick = (event) => {\n      if (modalRef.current && !modalRef.current.contains(event.target)) {\n        handleCloseModal();\n      }\n    };\n\n    if (isModalOpen) {\n      document.addEventListener('mousedown', handleOuterClick);\n      document.body.classList.add('body-lock');\n    } else {\n      document.removeEventListener('mousedown', handleOuterClick);\n      document.body.classList.remove('body-lock');\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleOuterClick);\n      document.body.classList.remove('body-lock');\n    };\n  }, [isModalOpen, handleCloseModal]);\n\n  useEffect(() => {\n    // Ensure modal closes if navigating away\n    if (location.pathname === '/' && isModalOpen) {\n      closeModal();\n    }\n  }, [location, isModalOpen, closeModal]);\n\n  // Helper function to transform video URLs for embedding\n  const getEmbeddedVideoUrl = (url) => {\n    const parts = url.split(\"vimeo.com/\")[1];\n    const vimeoId = parts.split('/')[0];\n    return `https://player.vimeo.com/video/${vimeoId}`;\n  };\n\n  // Memoize embedded video URL\n  const embeddedVideoUrl = useMemo(() => videoInfo ? getEmbeddedVideoUrl(videoInfo.URL) : null, [videoInfo]);\n\n  // Return null early if the modal should not be open or if there is no video info\n  if (!isModalOpen || !videoInfo) return null;\n\n  return (\n    <div className={`modal ${isModalOpen ? 'open' : ''}`} ref={modalRef}>\n      <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n        <span className=\"close\" onClick={handleCloseModal}>&times;</span>\n        <h2>{videoInfo.videoName}</h2>\n        <div className=\"embed-container\">\n          <iframe\n            src={embeddedVideoUrl} // Use memoized URL\n            allow=\"autoplay; fullscreen\"\n            allowFullScreen\n            title={videoInfo.videoName}\n          ></iframe>\n        </div>\n        <div dangerouslySetInnerHTML={{ __html: videoInfo.Description }}></div>\n      </div>\n    </div>\n  );\n}\n\nexport default Modal;","import React, { useState, useEffect, Suspense, useMemo, useRef, useCallback } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport SplashScreen from './SplashScreen';\nimport { BrowserRouter as Router, Routes, Route, useNavigate, useLocation, useParams } from 'react-router-dom';\nimport { ModalProvider, useModal } from './Context';\nimport Modal from './Modal';\nimport _ from 'lodash';\nimport { useInView } from 'react-intersection-observer';\nimport { isMobile } from 'react-device-detect';\n\n// Base URL setup for different environments\nconst BASE_URL = process.env.NODE_ENV === 'production'\n  ? 'https://vujade-site-bd6c94750c62.herokuapp.com'\n  : 'http://127.0.0.1:5000';\n\n// Video component for individual videos, optimized with memo for performance\nconst Video = React.memo(({ src, videoID, onVideoClick }) => {\n  const videoRef = useRef(null);\n  const { ref, inView } = useInView({\n    triggerOnce: true,\n    rootMargin: '50px 0px',\n  });\n\n  // Handle play on hover for desktop devices\n  const handleMouseEnter = useCallback(() => {\n    if (!isMobile && videoRef.current) {\n      videoRef.current.play().catch(error => console.error(\"Play was interrupted.\", error));\n    }\n  }, []);\n\n  // Handle pause on mouse leave for desktop devices\n  const handleMouseLeave = useCallback(() => {\n    if (!isMobile && videoRef.current) {\n      videoRef.current.pause();\n    }\n  }, []);\n\n  // Autoplay functionality for mobile devices when the video is in view\n  useEffect(() => {\n    if (isMobile && inView && videoRef.current) {\n      videoRef.current.play().catch(error => console.log(\"Autoplay was prevented.\", error));\n    }\n  }, [inView]);\n\n  return (\n    <div ref={ref} style={{ width: '100%', height: 'auto' }}>\n      {inView && (\n        <video\n          ref={videoRef}\n          src={src}\n          loop\n          muted\n          playsInline\n          onClick={() => onVideoClick(videoID)}\n          onMouseEnter={handleMouseEnter}\n          onMouseLeave={handleMouseLeave}\n          style={{ width: '100%', height: 'auto' }}\n        />\n      )}\n    </div>\n  );\n}, (prevProps, nextProps) => prevProps.videoID === nextProps.videoID && prevProps.src === nextProps.src);\n\n// Function to shuffle an array\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\n// MainContent component with video shuffling integrated\nfunction MainContent({ scenes, uniqueVideoIDs }) {\n  const { videoID } = useParams();\n  const { openModal, currentVideoID } = useModal();\n  const [shuffledScenes, setShuffledScenes] = useState([]);\n\n  useEffect(() => {\n    setShuffledScenes(shuffleArray([...scenes]));\n  }, [scenes]);\n\n  useEffect(() => {\n    if (videoID && scenes.some(scene => scene.videoID === videoID) && currentVideoID !== videoID) {\n      openModal(videoID);\n    }\n  }, [videoID, scenes, openModal, currentVideoID]);\n\n  const handleVideoNameClick = useCallback((id) => {\n    window.history.pushState({ modalOpen: true }, '', `/${id}`);\n    openModal(id);\n  }, [openModal]);\n\n  return (\n    <div id=\"videos-section\" className=\"App\">\n      <div className=\"video-menu\">\n        {uniqueVideoIDs.map((video, index) => (\n          <div key={`${video.videoID}-${index}`} onClick={() => handleVideoNameClick(video.videoID)} className=\"video-menu-item\">\n            {video.videoName}\n          </div>\n        ))}\n      </div>\n      <div className=\"video-grid\">\n        {shuffledScenes.map(scene => (\n          <Video\n            key={scene.sceneURL}\n            src={scene.sceneURL}\n            videoID={scene.videoID}\n            onVideoClick={handleVideoNameClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\n// Wrap MainContent with React.memo for performance optimization\nconst MemoizedMainContent = React.memo(MainContent);\n\nfunction Home({ scenes, uniqueVideoIDs }) {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [showSplash, setShowSplash] = useState(location.pathname === '/welcome');\n\n  useEffect(() => {\n    // Adjust for new initial splash page at /welcome and main content at root URL (/)\n    const handleScroll = _.debounce(() => {\n      // Logic to transition from splash page to main content based on scroll\n      if (window.scrollY > window.innerHeight * 1.0 && location.pathname !== '/') {\n        navigate('/');\n      }\n    }, 100);\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [navigate, location.pathname]);\n\n  useEffect(() => {\n    // Ensure that navigating directly to \"/\" shows main content and \"/welcome\" shows splash\n    setShowSplash(location.pathname === '/welcome');\n  }, [location.pathname]);\n\n  return (\n    <>\n      {showSplash ? <SplashScreen /> : null}\n      <MemoizedMainContent scenes={scenes} uniqueVideoIDs={uniqueVideoIDs} />\n    </>\n  );\n}\n\nfunction AppWrapper() {\n  // State for scenes and unique video IDs\n  const [scenes, setScenes] = useState([]);\n  const [uniqueVideoIDs, setUniqueVideoIDs] = useState([]);\n\n  useEffect(() => {\n    // Fetch content from the API\n    const fetchContent = async () => {\n      try {\n        const scenesResponse = await axios.get(`${BASE_URL}/api/scenes`);\n        setScenes(scenesResponse.data);\n        const videosResponse = await axios.get(`${BASE_URL}/api/videos`);\n        setUniqueVideoIDs(_.uniqBy(videosResponse.data, 'videoID'));\n        console.log('Fetched scenes:', scenesResponse.data);\n        console.log('Fetched videos:', videosResponse.data);\n      } catch (error) {\n        console.error('Error fetching content: ', error);\n      }\n    };\n    fetchContent();\n  }, []);\n\n  // Use useMemo to memoize scenes and uniqueVideoIDs so they don't cause unnecessary re-renders\n  const memoizedScenes = useMemo(() => scenes, [scenes]);\n  const memoizedUniqueVideoIDs = useMemo(() => uniqueVideoIDs, [uniqueVideoIDs]);\n\n  return (\n    <Router>\n      <Suspense fallback={<div>Loading...</div>}>\n        <ModalProvider>\n          <Routes>\n            <Route path=\"/welcome\" element={<Home scenes={memoizedScenes} uniqueVideoIDs={memoizedUniqueVideoIDs} />} />\n            <Route path=\"/\" element={<Home scenes={memoizedScenes} uniqueVideoIDs={memoizedUniqueVideoIDs} />} />\n            <Route path=\"/:videoID\" element={<Modal />} />\n          </Routes>\n        </ModalProvider>\n      </Suspense>\n    </Router>\n  );\n}\n\nexport default AppWrapper;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport { ModalProvider } from './Context';\nimport reportWebVitals from './reportWebVitals';\n\n// Use the createRoot API\nReactDOM.createRoot(document.getElementById('root')).render(\n  <React.StrictMode>\n    <ModalProvider>\n      <App />\n    </ModalProvider>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}