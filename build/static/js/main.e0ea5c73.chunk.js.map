{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["BASE_URL","Video","_ref","src","videoID","onVideoClick","videoRef","useRef","ref","inView","useInView","triggerOnce","rootMargin","React","createElement","style","width","height","loop","muted","playsInline","onClick","onMouseEnter","handleMouseEnter","current","playPromise","play","undefined","catch","error","console","onMouseLeave","handleMouseLeave","paused","pause","Modal","_ref2","videoInfo","onClose","className","e","stopPropagation","videoName","url","vimeoId","split","concat","getEmbeddedVideoUrl","URL","frameBorder","allow","allowFullScreen","title","whiteSpace","Description","App","_ref3","scenes","uniqueVideoIDs","selectedVideoInfo","setSelectedVideoInfo","navigate","useNavigate","handleVideoNameClick","axios","get","then","response","data","map","_ref4","key","scene","sceneURL","handleCloseModal","AppWrapper","setScenes","useState","setUniqueVideoIDs","useEffect","array","i","length","j","Math","floor","random","shuffleArray","Router","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.e0ea5c73.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { useInView } from 'react-intersection-observer';\nimport { BrowserRouter as Router, Route, Routes, useNavigate } from 'react-router-dom';\n\nconst BASE_URL = process.env.NODE_ENV === 'production'\n  ? 'https://vujade-site-bd6c94750c62.herokuapp.com'\n  : 'http://127.0.0.1:5000';\n\nfunction Video({ src, videoID, onVideoClick }) {\n  const videoRef = useRef(null);\n  const { ref, inView } = useInView({\n    triggerOnce: true,\n    rootMargin: '50px 0px',\n  });\n\n  const handleMouseEnter = () => {\n    if (videoRef.current) {\n      const playPromise = videoRef.current.play();\n      if (playPromise !== undefined) {\n        playPromise.catch(error => {\n          // Handle interrupted play request here\n          console.error(\"Play was interrupted.\", error);\n        });\n      }\n    }\n  };  \n\n  const handleMouseLeave = () => {\n    if (videoRef.current && !videoRef.current.paused) {\n      videoRef.current.pause();\n    }\n  };\n\n  return (\n    <div ref={ref} style={{ width: '100%', height: 'auto' }}>\n      {inView && (\n        <video\n          ref={videoRef}\n          src={src}\n          loop\n          muted\n          playsInline\n          onClick={() => onVideoClick(videoID)}\n          onMouseEnter={handleMouseEnter}\n          onMouseLeave={handleMouseLeave}\n          style={{ width: '100%', height: 'auto' }}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction Modal({ videoInfo, onClose }) {\n  const getEmbeddedVideoUrl = (url) => {\n    const vimeoId = url.split(\"vimeo.com/\")[1].split('/')[0];\n    return `https://player.vimeo.com/video/${vimeoId}`;\n  };\n\n  const handleModalContentClick = (e) => {\n    e.stopPropagation();\n  };\n\n  return (\n    <div className=\"modal\" onClick={onClose}>\n      <div className=\"modal-content\" onClick={handleModalContentClick}>\n        <span className=\"close\" onClick={onClose}>&times;</span>\n        <h2>{videoInfo.videoName}</h2>\n        <div className=\"embed-container\">\n          <iframe\n            src={getEmbeddedVideoUrl(videoInfo.URL)}\n            frameBorder=\"0\"\n            allow=\"autoplay; fullscreen\"\n            allowFullScreen\n            title={videoInfo.videoName}\n          ></iframe>\n        </div>\n        <p style={{ whiteSpace: 'pre-wrap' }}>{videoInfo.Description || ''}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction App({ scenes, uniqueVideoIDs, selectedVideoInfo, setSelectedVideoInfo }) {\n  const navigate = useNavigate();\n\n  const handleVideoNameClick = (videoID) => {\n    setSelectedVideoInfo(null); // Clear any previous video info\n    // Fetch detailed video information using the correct relative endpoint\n    axios.get(`${BASE_URL}/video_info/${videoID}`)\n      .then(response => {\n        setSelectedVideoInfo(response.data);\n        navigate(`/videos/${videoID}`);\n      })\n      .catch(error => {\n        console.error('Error fetching video info: ', error);\n      });\n  };\n\n  const handleCloseModal = () => {\n    setSelectedVideoInfo(null);\n    navigate('/');\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"video-menu\">\n        {uniqueVideoIDs.map(({ videoID, videoName }) => (\n          <div key={videoID} onClick={() => handleVideoNameClick(videoID)}>\n            {videoName}\n          </div>\n        ))}\n      </div>\n      <div className=\"video-grid\">\n        {scenes.map(scene => (\n          <Video\n            key={scene.sceneURL}\n            src={scene.sceneURL}\n            videoID={scene.videoID}\n            onVideoClick={() => handleVideoNameClick(scene.videoID)}\n          />\n        ))}\n      </div>\n      {selectedVideoInfo && <Modal videoInfo={selectedVideoInfo} onClose={handleCloseModal} />}\n    </div>\n  );\n}\n\nfunction AppWrapper() {\n  const [scenes, setScenes] = useState([]);\n  const [selectedVideoInfo, setSelectedVideoInfo] = useState(null);\n  const [uniqueVideoIDs, setUniqueVideoIDs] = useState([]);\n\n  useEffect(() => {\n    // Fetch scenes and unique video IDs\n    axios.get(`${BASE_URL}/scenes`)\n      .then(response => {\n        setScenes(shuffleArray(response.data));\n      })\n      .catch(error => {\n        console.error('Error fetching scenes: ', error);\n      });\n\n    axios.get(`${BASE_URL}/videos`)\n      .then(response => {\n        setUniqueVideoIDs(response.data);\n      })\n      .catch(error => {\n        console.error('Error fetching videos: ', error);\n      });\n  }, []);\n\n  function shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  }\n\n  return (\n    <Router>\n      <Routes>\n        <Route\n          path=\"/videos/:videoID\"\n          element={<App\n            scenes={scenes}\n            uniqueVideoIDs={uniqueVideoIDs}\n            selectedVideoInfo={selectedVideoInfo}\n            setSelectedVideoInfo={setSelectedVideoInfo}\n          />}\n        />\n        <Route\n          path=\"/\"\n          element={<App\n            scenes={scenes}\n            uniqueVideoIDs={uniqueVideoIDs}\n            selectedVideoInfo={selectedVideoInfo}\n            setSelectedVideoInfo={setSelectedVideoInfo}\n          />}\n        />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default AppWrapper;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}